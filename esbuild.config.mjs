import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { copyFile, mkdir } from "fs/promises";
import { dirname } from "path";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "dist/main.js",
	minify: prod,
});

// Function to copy a file from src to dist
async function copyFileToDistFolder(src, dest) {
	try {
		// Ensure the destination directory exists
		await mkdir(dirname(dest), { recursive: true });
		await copyFile(src, dest);
		console.log(`Copied ${src} to ${dest}`);
	} catch (error) {
		console.error(`Error copying ${src} to ${dest}:`, error);
	}
}

// Function to copy all required files
async function copyFiles() {
	await copyFileToDistFolder("src/styles.css", "dist/styles.css");
	await copyFileToDistFolder("src/manifest.json", "dist/manifest.json");
}

if (prod) {
	await context.rebuild();
	// Copy files after build in production mode
	await copyFiles();
	process.exit(0);
} else {
	await context.watch();
	// Copy files initially in development mode
	await copyFiles();
}
